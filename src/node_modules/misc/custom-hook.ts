import { useEffect, useReducer } from "react"

type ActionProps = {
    type: string
    payload: any
}


const showsReducer = (prev: any[], action: ActionProps) => {
    switch (action.type) {
        case "ADD":
            return [...prev, action.payload]
        case "REMOVE":
            return prev.filter(showId => showId !== action.payload)
        default:
            return prev
    }
}

function usePersistedReducer(reducer: typeof showsReducer, initialState: any[], key: any) {
    const [state, dispatch] = useReducer(reducer, initialState, (initialState) => {
        const persisited = localStorage.getItem(key)
        return persisited ? JSON.parse(persisited) : initialState
    })

    useEffect(() => {
        localStorage.setItem(key, JSON.stringify(state))
    }, [state, key])

    return { state, dispatch }
}


export function useShows() {
    return usePersistedReducer(showsReducer, [], "shows")
}
