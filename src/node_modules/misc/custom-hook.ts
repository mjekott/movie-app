
import { useCallback, useEffect, useReducer, useState } from "react"
import { ShowProps } from "components/show/ShowCard"
import { apiGet } from "misc/config"

type ActionProps = {
    type: string
    payload: any
}


const showsReducer = (prev: any[], action: ActionProps) => {
    switch (action.type) {
        case "ADD":
            return [...prev, action.payload]
        case "REMOVE":
            return prev.filter(showId => showId !== action.payload)
        default:
            return prev
    }
}

function usePersistedReducer(reducer: typeof showsReducer, initialState: any[], key: any) {
    const [state, dispatch] = useReducer(reducer, initialState, (initialState) => {
        const persisited = localStorage.getItem(key)
        return persisited ? JSON.parse(persisited) : initialState
    })

    useEffect(() => {
        localStorage.setItem(key, JSON.stringify(state))
    }, [state, key])

    return { state, dispatch }
}


export function useShows() {
    return usePersistedReducer(showsReducer, [], "shows")
}


export function useLastQuery(key = "lastQuery") {
    const [input, setInput] = useState(() => {
        const persisited = sessionStorage.getItem(key);
        return persisited ? JSON.parse(persisited) : ""

    })

    const setPerssistedInput = useCallback((newState: string) => {
        setInput(newState);
        sessionStorage.setItem(key, JSON.stringify(newState))

    }, [key])

    return [input, setPerssistedInput]
}


type StateProps = {
    show: ShowProps | null
    isLoading: boolean,
    error: string | null
}

type ActionType = {
    type: string,
    payload: any
}

const initialSatte: StateProps = {
    show: null,
    isLoading: true,
    error: null
}

const reducer = (prevState: StateProps, action: ActionType) => {
    switch (action.type) {
        case 'FETCH_SUCCESS':
            return { ...prevState, isLoading: false, show: action.payload }

        case 'FETCH_FAILED': {
            return { ...prevState, isLoading: false, show: action.payload }
        }

        default:
            return prevState
    }
}



export function useShow(showId: number) {
    const [state, dispatch] = useReducer(reducer, initialSatte)

    useEffect(() => {
        let isMounted = true;
        apiGet(`/shows/${showId}?embed[]=seasons&embed[]=cast`).then(results => {
            if (isMounted) {
                dispatch({ type: "FETCH_SUCCESS", payload: results })
            }
        }).catch(err => {
            if (isMounted) {
                dispatch({ type: "FETCH_FAILED", payload: err })
            }

        })
        return () => {
            isMounted = false
        }
    }, [showId])

    return state
}
