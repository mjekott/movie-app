import React, { useEffect, useReducer, useState } from 'react'
import { useParams } from "react-router-dom"
import { apiGet } from "misc/config"
import ShowMainData from "components/show/ShowMainData"
import Details from "components/show/Detail"
import Casts from "components/show/Cast"
import Seasons from "components/show/Seasons"
import { ShowProps } from "components/show/ShowCard"
import { ShowPageWrapper,InfoBlock} from "./Show.styled"

type StateProps = {
    show: ShowProps | null
    isLoading: boolean,
    error:boolean
}

type ActionType = {
    type: string,
    payload:any
}

const initialSatte:StateProps= {
    show: null,
    isLoading: true,
    error:null
}

const reducer = (prevState:StateProps, action:ActionType)=>{
    switch (action.type) {
        case 'FETCH_SUCCESS':
            return {...prevState,isLoading:false,show:action.payload}

        case 'FETCH_FAILED': {
            return {...prevState,isLoading:false,show:action.payload}
        }

        default:
            return prevState
    }
}

const Show = () => {
    const { id } = useParams()
    const [{isLoading,show,error},dispatch] = useReducer(reducer,initialSatte)

    useEffect(() => {
        let isMounted = true;
        apiGet(`/shows/${id}?embed[]=seasons&embed[]=cast`).then(results => {
            if (isMounted) {
                dispatch({type:"FETCH_SUCCESS",payload:results})
            }
        }).catch(err => {
            if (isMounted) {
              dispatch({type:"FETCH_FAILED",payload:err})
            }

        })
        return () => {
       isMounted = false
        }
    }, [id])


    if (isLoading) {
        return <div>Data is being loaded</div>
    }

    if (error) {
        return <div>An Error occured</div>
    }


  return (
      <ShowPageWrapper>
          <ShowMainData image={show.image} name={show.name} rating={show.rating} summary={show.summary} tags={show.genres}  />
          <InfoBlock>
              <h2>Details</h2>
              <Details status={show.status} network={show.netowork} premiered={show.premierred}/>
          </InfoBlock>
           <InfoBlock>
              <h2>Seasons</h2>
              <Seasons seasons={show._embedded.seasons}/>
          </InfoBlock>
          <InfoBlock>
              <h2>Casts</h2>
            <Casts casts={show._embedded.cast}/>
          </InfoBlock>
    </ShowPageWrapper>
  )
}

export default Show